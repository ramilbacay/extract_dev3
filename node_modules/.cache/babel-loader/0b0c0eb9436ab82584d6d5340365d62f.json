{"ast":null,"code":"import _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\extract_dev3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\extract_dev3\\\\src\\\\components\\\\MainCard.js\";\nimport React, { useState } from 'react';\nimport { useFormik, Form, Formik, Field, FieldArray } from 'formik';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // import Form from 'react-bootstrap/Form';\n\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport { BasicInput, SideButton, RegularButton, ReactSwitch } from './FormComponents.js';\nimport Row from 'react-bootstrap/Row';\n\nconst ReactCard = () => {\n  // const [cluster, setCluster] = useState(false);\n  // const formik = useFormik({\n  //     initialValues: {\n  //       reqst_cd: '',\n  //       wflow_cd: '',\n  //       workflows: ['1'],\n  //       cluster_switch: cluster\n  //     },\n  //     enableReinitialize: true,\n  //     onSubmit: values => {\n  //       alert(JSON.stringify(values, null, 2));\n  //     },\n  // });\n  // return(\n  //     <Container className=\"mt-5 mb-5\">\n  //         <Card>\n  //             <Card.Body>\n  //                 <Form onSubmit={formik.handleSubmit}>\n  //                     <Card.Title>Extract Script for Transport</Card.Title>\n  //                     <Row>\n  //                         <BasicInput id=\"reqst_cd\" name=\"reqst_cd\" value={formik.values.reqst_cd} onChange={formik.handleChange} col=\"6\" placeholder=\"Request Code\" type=\"text\" />\n  //                     </Row>\n  //                     <Row>\n  //                         <BasicInput id=\"wflow_cd\" name=\"wflow_cd\" value={formik.values.wflow_cd} onChange={formik.handleChange} col=\"6\" placeholder=\"Workflow Code\" type=\"text\" />\n  //                     </Row>\n  //                     <FieldArray\n  //                         name=\"workflows\"\n  //                         render={arrayHelpers => (\n  //                             formik.values.workflows.map((cd, index) => (\n  //                                 <Row key={`workflows_${index}`}>\n  //                                     <BasicInput\n  //                                         name={`workflows_${index}`}\n  //                                         id={`workflows_${index}`}\n  //                                         type=\"text\"\n  //                                         value={cd}\n  //                                         placeholder=\"Workflow Code\"\n  //                                     />\n  //                                 </Row>\n  //                             ))\n  //                         )}\n  //                     />\n  //                     <Row>\n  //                         <ReactSwitch id=\"cluster_switch\" name=\"cluster_switch\" label=\"With Cluster?\" checked={cluster} onChange={() => setCluster(!cluster)} />\n  //                     </Row>\n  //                     <Row>\n  //                         <RegularButton col=\"10\" type=\"submit\" />\n  //                     </Row>\n  //                 </Form>\n  //             </Card.Body>\n  //         </Card>\n  //     </Container>\n  // );\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        cluster = _useState2[0],\n        setCluster = _useState2[1];\n\n  return React.createElement(Formik, {\n    initialValues: {\n      reqst_cd: '',\n      wflow_cd: '',\n      workflows: ['test'],\n      cluster_switch: cluster\n    },\n    onSubmit: values => setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n    }, 500),\n    render: ({\n      values\n    }) => React.createElement(Container, {\n      className: \"mt-5 mb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Extract Script for Transport\"), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Field, {\n      as: BasicInput,\n      type: \"text\",\n      id: \"reqst_cd\",\n      name: \"reqst_cd\",\n      placeholder: \"Request Code\",\n      col: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(FieldArray, {\n      name: \"workflows\",\n      render: arrayHelpers => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, values.workflows && values.workflows.length > 0 ? values.workflows.map((friend, index) => React.createElement(Row, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Field, {\n        as: BasicInput,\n        name: `workflows.${index}`,\n        placeholder: \"Workflow Code\",\n        col: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => arrayHelpers.remove(index) // remove a friend from the list\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"-\"), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => arrayHelpers.insert(index, '') // insert an empty string at a position\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"+\"))) : React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => arrayHelpers.push(''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Add a friend\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Field, {\n      as: ReactSwitch,\n      id: \"cluster_switch\",\n      name: \"cluster_switch\",\n      label: \"With Cluster?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Submit\")))))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  });\n};\n\nexport default ReactCard;","map":{"version":3,"sources":["C:/xampp/htdocs/extract_dev3/src/components/MainCard.js"],"names":["React","useState","useFormik","Form","Formik","Field","FieldArray","Card","Container","BasicInput","SideButton","RegularButton","ReactSwitch","Row","ReactCard","cluster","setCluster","reqst_cd","wflow_cd","workflows","cluster_switch","values","setTimeout","alert","JSON","stringify","arrayHelpers","length","map","friend","index","remove","insert","push"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useFormik, Form, Formik, Field, FieldArray } from 'formik';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport {BasicInput, SideButton, RegularButton, ReactSwitch} from './FormComponents.js';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst ReactCard = () => {\r\n\r\n    // const [cluster, setCluster] = useState(false);\r\n\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //       reqst_cd: '',\r\n    //       wflow_cd: '',\r\n    //       workflows: ['1'],\r\n    //       cluster_switch: cluster\r\n    //     },\r\n    //     enableReinitialize: true,\r\n    //     onSubmit: values => {\r\n    //       alert(JSON.stringify(values, null, 2));\r\n    //     },\r\n    // });\r\n\r\n    \r\n    // return(\r\n    //     <Container className=\"mt-5 mb-5\">\r\n    //         <Card>\r\n    //             <Card.Body>\r\n    //                 <Form onSubmit={formik.handleSubmit}>\r\n    //                     <Card.Title>Extract Script for Transport</Card.Title>\r\n    //                     <Row>\r\n    //                         <BasicInput id=\"reqst_cd\" name=\"reqst_cd\" value={formik.values.reqst_cd} onChange={formik.handleChange} col=\"6\" placeholder=\"Request Code\" type=\"text\" />\r\n    //                     </Row>\r\n    //                     <Row>\r\n    //                         <BasicInput id=\"wflow_cd\" name=\"wflow_cd\" value={formik.values.wflow_cd} onChange={formik.handleChange} col=\"6\" placeholder=\"Workflow Code\" type=\"text\" />\r\n    //                     </Row>\r\n    //                     <FieldArray\r\n    //                         name=\"workflows\"\r\n    //                         render={arrayHelpers => (\r\n    //                             formik.values.workflows.map((cd, index) => (\r\n    //                                 <Row key={`workflows_${index}`}>\r\n    //                                     <BasicInput\r\n    //                                         name={`workflows_${index}`}\r\n    //                                         id={`workflows_${index}`}\r\n    //                                         type=\"text\"\r\n    //                                         value={cd}\r\n    //                                         placeholder=\"Workflow Code\"\r\n    //                                     />\r\n    //                                 </Row>\r\n    //                             ))\r\n    //                         )}\r\n    //                     />\r\n                        \r\n                            \r\n                        \r\n    //                     <Row>\r\n    //                         <ReactSwitch id=\"cluster_switch\" name=\"cluster_switch\" label=\"With Cluster?\" checked={cluster} onChange={() => setCluster(!cluster)} />\r\n    //                     </Row>\r\n    //                     <Row>\r\n    //                         <RegularButton col=\"10\" type=\"submit\" />\r\n    //                     </Row>\r\n    //                 </Form>\r\n    //             </Card.Body>\r\n    //         </Card>\r\n    //     </Container>\r\n    // );\r\n\r\n    const [cluster, setCluster] = useState(false);\r\n\r\n    return(\r\n\r\n        <Formik\r\n        initialValues={{\r\n            reqst_cd: '',\r\n            wflow_cd: '',\r\n            workflows: ['test'],\r\n            cluster_switch: cluster\r\n        }}\r\n        onSubmit={values =>\r\n            setTimeout(() => {\r\n            alert(JSON.stringify(values, null, 2));\r\n            }, 500)\r\n        }\r\n        render={({ values }) => (\r\n            <Container className=\"mt-5 mb-5\">\r\n                <Card>\r\n                <Card.Body>\r\n                    <Card.Title>Extract Script for Transport</Card.Title>\r\n                    <Form>\r\n                        <Row>\r\n                            <Field as={BasicInput} type=\"text\" id=\"reqst_cd\" name=\"reqst_cd\" placeholder=\"Request Code\" col=\"6\" />\r\n                            {/* <BasicInput id=\"reqst_cd\" name=\"reqst_cd\" value={values.reqst_cd} onChange={handleChange} col=\"6\" placeholder=\"Request Code\" type=\"text\" /> */}\r\n                        </Row>\r\n                        {/* <Row>\r\n                            <Field as={BasicInput} type=\"text\" id=\"wflow_cd\" name=\"wflow_cd\" placeholder=\"Workflow Code\" col=\"6\" />\r\n                        </Row> */}\r\n                        <FieldArray\r\n                            name=\"workflows\"\r\n                            render={arrayHelpers => (\r\n                            <div>\r\n                                {values.workflows && values.workflows.length > 0 ? (\r\n                                values.workflows.map((friend, index) => (\r\n                                    <Row key={index}>\r\n                                    <Field as={BasicInput} name={`workflows.${index}`} placeholder=\"Workflow Code\" col=\"6\" />\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\r\n                                    >\r\n                                        -\r\n                                    </button>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\r\n                                    >\r\n                                        +\r\n                                    </button>\r\n                                    </Row>\r\n                                ))\r\n                                ) : (\r\n                                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\r\n                                    {/* show this when user has removed all friends from the list */}\r\n                                    Add a friend\r\n                                </button>\r\n                                )}\r\n                                \r\n                            </div>\r\n                            )}\r\n                        />\r\n                        <Row>\r\n                            <Field as={ReactSwitch} id=\"cluster_switch\" name=\"cluster_switch\" label=\"With Cluster?\"/>\r\n                        </Row>\r\n                        <div>\r\n                            <button type=\"submit\">Submit</button>\r\n                        </div>\r\n                    </Form>\r\n                </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ReactCard;"]},"metadata":{},"sourceType":"module"}
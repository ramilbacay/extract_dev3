{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\extract_dev3\\\\src\\\\components\\\\MainCard.js\";\nimport React from 'react';\nimport { Form, Formik } from 'formik';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as Bs from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { RegularButton, MultipleInput, InputWithLabel, ReactSwitch, ReactAlert } from './FormComponents';\nconst ValidForm = Yup.object().shape({\n  reqst_cd: Yup.string().required('Request code is required.'),\n  workflows: Yup.array().of(Yup.string().required('Workflow code is required.')).min(1, 'Minimum of 1 workflow.'),\n  clusters: Yup.array().of(Yup.string().required('Cluster code is required.')),\n  cluster_apvls: Yup.array().of(Yup.string().required('Cluster Approval code is required.')),\n  dropdowns: Yup.array().of(Yup.string().required('Field Name is required.')),\n  // apps_cd: Yup.string(),\n  // apps_owners: Yup.array()\n  // .of(\n  //     Yup.string()\n  //     .required('Application Owner is required.'),\n  // )\n  // .when('apps_cd', {\n  //     is: (apps_cd) => apps_cd > '',\n  //     then: Yup.array()\n  //         .min(1, 'Minimum of 1 Application Owner.'),          \n  // }),\n  reqst_cond_switch: Yup.boolean(),\n  condtn_cd: Yup.array().when('reqst_cond_switch', {\n    is: reqst_cond_switch => reqst_cond_switch === true,\n    then: Yup.array().of(Yup.string().required('Condition code is required.')).min(1, 'Minimum of 1 condition.')\n  })\n});\n\nclass ReactCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTabPress = (data, event) => {\n      console.log();\n      console.log(event.keyCode);\n    };\n\n    this.state = {\n      users: [],\n      alert_class: '',\n      alert_heading: '',\n      alert_body: '',\n      alert_show: false\n    }; // this.appsCdChangeHandler = this.appsCdChangeHandler.bind(this);\n\n    this.alertClose = this.alertClose.bind(this);\n    this.handleTabPress = this.handleTabPress.bind(this);\n  }\n\n  componentDidMount() {} // fetch(\"http://10.15.10.250:8080/extract_dev2/users\")\n  // .then(res => res.json())\n  // .then(\n  //     (result) => {\n  // console.log(result)\n  // this.setState({\n  // users: result\n  // isLoaded: true,\n  // selectedOption: \"Please choose\"\n  // });\n  //     },\n  //     (error) => {\n  //         this.setState({\n  //             error\n  //         });\n  //         console.log(this.state.error)\n  //     }\n  // )\n  // clusterApvlSwitchChangeHandler(){\n  //     var new_wflow = this.state.other_wflow.concat('');\n  //     this.setState({ other_wflow: new_wflow });\n  // }\n\n\n  alertClose() {\n    this.setState({\n      alert_show: false\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(ReactAlert, {\n      display: this.state.alert_show,\n      class: this.state.alert_class,\n      title: this.state.alert_heading,\n      body: this.state.alert_body,\n      onClose: this.alertClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Formik, {\n      initialValues: {\n        users: this.state.users,\n        reqst_cd: '',\n        workflows: [],\n        cluster_switch: false,\n        clusters: [],\n        cluster_apvls: [],\n        dropdowns: [],\n        apps_cd: '',\n        // apps_owners: [],\n        wflow_cond_switch: false,\n        reqst_cond_switch: false,\n        condtn_cd: [],\n        cond_ctrls_switch: false,\n        form_validate_switch: false,\n        ws_apvl_switch: false,\n        ws_actv_switch: false\n      },\n      enableReinitialize: true,\n      validationSchema: ValidForm,\n      onSubmit: (values, {\n        setSubmitting,\n        resetForm\n      }) => {\n        const that = this;\n        fetch(\"http://10.15.10.250:8080/extract_dev2/extract_workflow\", {\n          method: 'POST',\n          mode: 'cors',\n          body: JSON.stringify(values, null, 2)\n        }).then(handleResponse).then(data => {\n          if (data['error']) {\n            that.setState({\n              alert_show: true,\n              alert_class: 'alert-danger',\n              alert_heading: 'Error',\n              alert_body: data['data']\n            });\n            setSubmitting(false);\n          } else {\n            setSubmitting(false);\n            resetForm(values);\n            that.setState({\n              alert_show: true,\n              alert_class: 'alert-success',\n              alert_heading: 'Workflow Extracted',\n              alert_body: 'Script for transport has been extracted. Please check the files for the script and rollback.'\n            });\n          }\n        }, {\n          /* (error) => {\r\n             that.setState({\r\n                 error\r\n             });\r\n             that.setState({\r\n                 alert_show: true,\r\n                 alert_class: 'alert-danger',\r\n                 alert_heading: 'Error',\r\n                 alert_body: 'There was an error processing your request. Please try again. Error: ' + error\r\n             });\r\n             console.log(error);\r\n             setSubmitting(false);\r\n             \r\n          } */\n        }).catch(error => {\n          that.setState({\n            error\n          });\n          that.setState({\n            alert_show: true,\n            alert_class: 'alert-danger',\n            alert_heading: 'Error',\n            alert_body: 'There was an error processing your request. Please try again or contact your system administrator. Error: ' + error.statusText\n          });\n          console.log(error.err);\n          setSubmitting(false);\n        });\n\n        function handleResponse(response) {\n          let contentType = response.headers.get('content-type');\n\n          if (contentType.includes('application/json')) {\n            return handleJSONResponse(response);\n          } else if (contentType.includes('text/html')) {\n            return handleTextResponse(response);\n          } else {\n            // Other response types as necessary. I haven't found a need for them yet though.\n            throw new Error(`Sorry, content-type ${contentType} not supported`);\n          }\n        }\n\n        function handleJSONResponse(response) {\n          return response.json().then(json => {\n            if (response.ok) {\n              return json;\n            } else {\n              return Promise.reject(Object.assign({}, json, {\n                status: response.status,\n                statusText: response.statusText\n              }));\n            }\n          });\n        }\n\n        function handleTextResponse(response) {\n          return response.text().then(text => {\n            if (response.ok) {\n              return text;\n            } else {\n              return Promise.reject({\n                status: response.status,\n                statusText: response.statusText,\n                err: text\n              });\n            }\n          });\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, ({\n      handleSubmit,\n      handleChange,\n      handleBlur,\n      values,\n      touched,\n      isValid,\n      errors,\n      form,\n      isSubmitting,\n      formProps\n    }) => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(Bs.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(InputWithLabel, {\n      comp: Bs.Form.Control,\n      type: \"text\",\n      id: \"reqst_cd\",\n      name: \"reqst_cd\",\n      placeholder: \"Request Code\",\n      label: \"Request Code\",\n      errors: errors.reqst_cd,\n      touched: touched.reqst_cd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    })), React.createElement(Bs.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(Bs.Col, {\n      md: \"12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(MultipleInput, {\n      show: true,\n      value: values.workflows,\n      errors: errors.workflows,\n      touched: touched.workflows,\n      name: \"workflows\",\n      item: \"workflow\",\n      placeholder: \"Workflow Code\",\n      button: \"Add Workflow\",\n      label: \"Workflow\",\n      keydown: this.handleTabPress(workflows, event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }))), React.createElement(Bs.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(Bs.Col, {\n      md: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(MultipleInput, {\n      show: true,\n      value: values.clusters,\n      errors: errors.clusters,\n      touched: touched.clusters,\n      name: \"clusters\",\n      item: \"cluster\",\n      placeholder: \"Cluster Code\",\n      button: \"Add Cluster\",\n      label: \"Cluster\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    })), React.createElement(Bs.Col, {\n      md: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(MultipleInput, {\n      show: true,\n      value: values.cluster_apvls,\n      errors: errors.cluster_apvls,\n      touched: touched.cluster_apvls,\n      name: \"cluster_apvls\",\n      item: \"cluster_apvls\",\n      placeholder: \"Cluster Approval Code\",\n      button: \"Add Cluster Approver\",\n      label: \"Cluster Approval\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }))), React.createElement(Bs.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(Bs.Col, {\n      md: \"6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(MultipleInput, {\n      show: true,\n      value: values.dropdowns,\n      errors: errors.dropdowns,\n      touched: touched.dropdowns,\n      name: \"dropdowns\",\n      item: \"dropdowns\",\n      placeholder: \"Field Name\",\n      button: \"Add Dropdown\",\n      label: \"Dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }))), React.createElement(Bs.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(InputWithLabel, {\n      comp: Bs.Form.Control,\n      type: \"text\",\n      id: \"apps_cd\",\n      name: \"apps_cd\",\n      placeholder: \"Application Code\",\n      label: \"Application Code\",\n      errors: errors.apps_cd,\n      touched: touched.apps_cd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    })), React.createElement(ReactSwitch, {\n      id: \"wflow_cond_switch\",\n      name: \"wflow_cond_switch\",\n      label: \"With workflow condition?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }), React.createElement(ReactSwitch, {\n      id: \"reqst_cond_switch\",\n      name: \"reqst_cond_switch\",\n      label: \"With request condition?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(MultipleInput, {\n      show: values.reqst_cond_switch,\n      value: values.condtn_cd,\n      errors: errors.condtn_cd,\n      touched: touched.condtn_cd,\n      name: \"condtn_cd\",\n      item: \"dropdowns\",\n      placeholder: \"Condition Code\",\n      button: \"Add Condition\",\n      label: \"Condition Code\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(ReactSwitch, {\n      id: \"cond_ctrls_switch\",\n      name: \"cond_ctrls_switch\",\n      label: \"With conditional control?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }), React.createElement(ReactSwitch, {\n      id: \"form_validate_switch\",\n      name: \"form_validate_switch\",\n      label: \"With trigger on Save/Finalize?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }), React.createElement(ReactSwitch, {\n      id: \"ws_apvl_switch\",\n      name: \"ws_apvl_switch\",\n      label: \"With trigger on approval?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }), React.createElement(ReactSwitch, {\n      id: \"ws_actv_switch\",\n      name: \"ws_actv_switch\",\n      label: \"With trigger when an activity is done?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }), React.createElement(RegularButton, {\n      col: \"5\",\n      type: \"submit\",\n      size: \"lg\",\n      text: \"Extract\",\n      isSubmitting: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }))));\n  }\n\n}\n\n;\nexport default ReactCard;","map":{"version":3,"sources":["C:/xampp/htdocs/extract_dev3/src/components/MainCard.js"],"names":["React","Form","Formik","Bs","Yup","RegularButton","MultipleInput","InputWithLabel","ReactSwitch","ReactAlert","ValidForm","object","shape","reqst_cd","string","required","workflows","array","of","min","clusters","cluster_apvls","dropdowns","reqst_cond_switch","boolean","condtn_cd","when","is","then","ReactCard","Component","constructor","props","handleTabPress","data","event","console","log","keyCode","state","users","alert_class","alert_heading","alert_body","alert_show","alertClose","bind","componentDidMount","setState","render","cluster_switch","apps_cd","wflow_cond_switch","cond_ctrls_switch","form_validate_switch","ws_apvl_switch","ws_actv_switch","values","setSubmitting","resetForm","that","fetch","method","mode","body","JSON","stringify","handleResponse","catch","error","statusText","err","response","contentType","headers","get","includes","handleJSONResponse","handleTextResponse","Error","json","ok","Promise","reject","Object","assign","status","text","handleSubmit","handleChange","handleBlur","touched","isValid","errors","form","isSubmitting","formProps","Control"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form, Formik } from 'formik';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as Bs from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\n\r\nimport { RegularButton, MultipleInput, InputWithLabel, ReactSwitch, ReactAlert} from './FormComponents';\r\n\r\nconst ValidForm = Yup.object().shape({\r\n        reqst_cd: Yup.string()\r\n            .required('Request code is required.'),\r\n        workflows: Yup.array()\r\n            .of(\r\n                Yup.string()\r\n                .required('Workflow code is required.'),\r\n            )\r\n            .min(1, 'Minimum of 1 workflow.'),\r\n        clusters: Yup.array()\r\n            .of(\r\n                Yup.string()\r\n                .required('Cluster code is required.')\r\n            ),\r\n        cluster_apvls: Yup.array()\r\n            .of(\r\n                Yup.string()\r\n                .required('Cluster Approval code is required.')\r\n            ),\r\n        dropdowns: Yup.array()\r\n            .of(\r\n                Yup.string()\r\n                .required('Field Name is required.')\r\n            ),\r\n        // apps_cd: Yup.string(),\r\n        // apps_owners: Yup.array()\r\n        // .of(\r\n        //     Yup.string()\r\n        //     .required('Application Owner is required.'),\r\n        // )\r\n        // .when('apps_cd', {\r\n        //     is: (apps_cd) => apps_cd > '',\r\n        //     then: Yup.array()\r\n        //         .min(1, 'Minimum of 1 Application Owner.'),          \r\n        // }),\r\n        reqst_cond_switch: Yup.boolean(),\r\n        condtn_cd: Yup.array()\r\n            .when('reqst_cond_switch', {\r\n                is: (reqst_cond_switch) => reqst_cond_switch === true,\r\n                then: Yup.array()\r\n                .of(\r\n                    Yup.string()\r\n                    .required('Condition code is required.'),\r\n                )\r\n                .min(1, 'Minimum of 1 condition.'),\r\n            })\r\n            \r\n        \r\n});\r\n\r\nclass ReactCard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          users: [],\r\n          alert_class: '',\r\n          alert_heading: '',\r\n          alert_body: '',\r\n          alert_show: false\r\n        };\r\n\r\n        // this.appsCdChangeHandler = this.appsCdChangeHandler.bind(this);\r\n        this.alertClose = this.alertClose.bind(this);\r\n        this.handleTabPress = this.handleTabPress.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // fetch(\"http://10.15.10.250:8080/extract_dev2/users\")\r\n        // .then(res => res.json())\r\n        // .then(\r\n        //     (result) => {\r\n                // console.log(result)\r\n                // this.setState({\r\n                    // users: result\r\n                    // isLoaded: true,\r\n                    // selectedOption: \"Please choose\"\r\n                // });\r\n        //     },\r\n        //     (error) => {\r\n        //         this.setState({\r\n        //             error\r\n        //         });\r\n        //         console.log(this.state.error)\r\n        //     }\r\n        // )\r\n\r\n    }\r\n\r\n    // clusterApvlSwitchChangeHandler(){\r\n    //     var new_wflow = this.state.other_wflow.concat('');\r\n    //     this.setState({ other_wflow: new_wflow });\r\n    // }\r\n\r\n    alertClose(){\r\n        this.setState({\r\n            alert_show: false\r\n        });\r\n    }\r\n\r\n    handleTabPress = (data, event) =>{\r\n        console.log()\r\n        console.log(event.keyCode)\r\n    }\r\n\r\n    render(){\r\n    return(\r\n        <>\r\n        <ReactAlert \r\n            display={this.state.alert_show}\r\n            class={this.state.alert_class} \r\n            title={this.state.alert_heading} \r\n            body={this.state.alert_body} \r\n            onClose={this.alertClose}\r\n        />\r\n        <Formik\r\n            initialValues={{ \r\n                users: this.state.users,\r\n                reqst_cd: '',\r\n                workflows: [],\r\n                cluster_switch: false,\r\n                clusters: [],\r\n                cluster_apvls: [],\r\n                dropdowns: [],\r\n                apps_cd: '',\r\n                // apps_owners: [],\r\n                wflow_cond_switch: false,\r\n                reqst_cond_switch: false,\r\n                condtn_cd: [],\r\n                cond_ctrls_switch: false,\r\n                form_validate_switch: false,\r\n                ws_apvl_switch: false,\r\n                ws_actv_switch: false\r\n            }}\r\n            enableReinitialize\r\n            validationSchema={ValidForm}\r\n            onSubmit={( values, { setSubmitting, resetForm }) =>{\r\n\r\n                    const that = this;\r\n\r\n                    fetch(\"http://10.15.10.250:8080/extract_dev2/extract_workflow\", {\r\n                            method: 'POST',\r\n                            mode: 'cors',\r\n                            body: JSON.stringify(values, null, 2)\r\n                        }\r\n                    )\r\n                        .then(handleResponse)\r\n                        .then(data => {\r\n                                if(data['error']){\r\n                                    that.setState({\r\n                                        alert_show: true,\r\n                                        alert_class: 'alert-danger',\r\n                                        alert_heading: 'Error',\r\n                                        alert_body: data['data']\r\n                                    });\r\n                                    setSubmitting(false)\r\n                                }\r\n                                else{\r\n                                    setSubmitting(false)\r\n                                    resetForm(values)\r\n                                    that.setState({\r\n                                        alert_show: true,\r\n                                        alert_class: 'alert-success',\r\n                                        alert_heading: 'Workflow Extracted',\r\n                                        alert_body: 'Script for transport has been extracted. Please check the files for the script and rollback.'\r\n                                    });\r\n                                }\r\n                                \r\n                            },\r\n                            {/* (error) => {\r\n                                that.setState({\r\n                                    error\r\n                                });\r\n                                that.setState({\r\n                                    alert_show: true,\r\n                                    alert_class: 'alert-danger',\r\n                                    alert_heading: 'Error',\r\n                                    alert_body: 'There was an error processing your request. Please try again. Error: ' + error\r\n                                });\r\n                                console.log(error);\r\n                                setSubmitting(false);\r\n                                \r\n                            } */}\r\n                        )\r\n                        .catch(error => {\r\n                            that.setState({\r\n                                error\r\n                            });\r\n                            that.setState({\r\n                                alert_show: true,\r\n                                alert_class: 'alert-danger',\r\n                                alert_heading: 'Error',\r\n                                alert_body: 'There was an error processing your request. Please try again or contact your system administrator. Error: ' + error.statusText\r\n                            });\r\n                            console.log(error.err);\r\n                            setSubmitting(false);\r\n                        })\r\n                    function handleResponse (response) {\r\n                        let contentType = response.headers.get('content-type')\r\n                        if (contentType.includes('application/json')) {\r\n                            return handleJSONResponse(response)\r\n                        } else if (contentType.includes('text/html')) {\r\n                            return handleTextResponse(response)\r\n                        } else {\r\n                            // Other response types as necessary. I haven't found a need for them yet though.\r\n                            throw new Error(`Sorry, content-type ${contentType} not supported`)\r\n                        }\r\n                    }\r\n\r\n                    function handleJSONResponse (response) {\r\n                        return response.json()\r\n                        .then(json => {\r\n                            if (response.ok) {\r\n                                return json\r\n                            } else {\r\n                                return Promise.reject(Object.assign({}, json, {\r\n                                status: response.status,\r\n                                statusText: response.statusText\r\n                                }))\r\n                            }\r\n                        })\r\n                    }\r\n                    function handleTextResponse (response) {\r\n                        return response.text()\r\n                        .then(text => {\r\n                            if (response.ok) {\r\n                                return text\r\n                            } else {\r\n                                return Promise.reject({\r\n                                status: response.status,\r\n                                statusText: response.statusText,\r\n                                err: text\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        >\r\n            {({ \r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                errors,\r\n                form,\r\n                isSubmitting,\r\n                formProps\r\n            }) => (\r\n                \r\n                <Form>\r\n                    <Bs.Row>\r\n                        <InputWithLabel\r\n                            comp={Bs.Form.Control}\r\n                            type=\"text\"\r\n                            id=\"reqst_cd\"\r\n                            name=\"reqst_cd\"\r\n                            placeholder=\"Request Code\"\r\n                            label=\"Request Code\"\r\n                            errors={errors.reqst_cd}\r\n                            touched={touched.reqst_cd}\r\n                        />\r\n                    </Bs.Row>\r\n                    <Bs.Row>\r\n                        <Bs.Col md=\"12\">\r\n                            <MultipleInput \r\n                                show={true}\r\n                                value={values.workflows} \r\n                                errors={errors.workflows} \r\n                                touched={touched.workflows} \r\n                                name=\"workflows\" \r\n                                item=\"workflow\" \r\n                                placeholder=\"Workflow Code\" \r\n                                button=\"Add Workflow\" \r\n                                label=\"Workflow\" \r\n                                keydown={this.handleTabPress(workflows, event)}\r\n                            />\r\n                        </Bs.Col>\r\n                    </Bs.Row>\r\n                   \r\n                    {/* <ReactSwitch label=\"With Cluster?\" name=\"cluster_switch\" id=\"cluster_switch\" col=\"5\" /> */}\r\n                    <Bs.Row>\r\n                        <Bs.Col md=\"6\">\r\n                            <MultipleInput \r\n                                show={true}\r\n                                value={values.clusters} \r\n                                errors={errors.clusters} \r\n                                touched={touched.clusters} \r\n                                name=\"clusters\" \r\n                                item=\"cluster\" \r\n                                placeholder=\"Cluster Code\" \r\n                                button=\"Add Cluster\" \r\n                                label=\"Cluster\" \r\n                            />\r\n                        </Bs.Col>\r\n                        <Bs.Col md=\"6\">\r\n                            <MultipleInput \r\n                                show={true}\r\n                                value={values.cluster_apvls} \r\n                                errors={errors.cluster_apvls} \r\n                                touched={touched.cluster_apvls} \r\n                                name=\"cluster_apvls\" \r\n                                item=\"cluster_apvls\" \r\n                                placeholder=\"Cluster Approval Code\" \r\n                                button=\"Add Cluster Approver\" \r\n                                label=\"Cluster Approval\" \r\n                            />\r\n                        </Bs.Col>\r\n                    </Bs.Row>\r\n                    \r\n                    <Bs.Row>\r\n                        <Bs.Col md=\"6\">\r\n                            <MultipleInput \r\n                                show={true}\r\n                                value={values.dropdowns} \r\n                                errors={errors.dropdowns} \r\n                                touched={touched.dropdowns} \r\n                                name=\"dropdowns\" \r\n                                item=\"dropdowns\" \r\n                                placeholder=\"Field Name\" \r\n                                button=\"Add Dropdown\" \r\n                                label=\"Dropdown\" \r\n                            />\r\n                        </Bs.Col>\r\n                    </Bs.Row>\r\n                    \r\n                    <Bs.Row>\r\n                        <InputWithLabel\r\n                            comp={Bs.Form.Control}\r\n                            type=\"text\"\r\n                            id=\"apps_cd\"\r\n                            name=\"apps_cd\"\r\n                            placeholder=\"Application Code\"\r\n                            label=\"Application Code\"\r\n                            errors={errors.apps_cd}\r\n                            touched={touched.apps_cd}\r\n                        />\r\n                    </Bs.Row>\r\n                    {/* <MultipleInput \r\n                        value={values.apps_owners} \r\n                        name=\"apps_owners\" \r\n                        item=\"apps_owners\" \r\n                        placeholder=\"Application Owner\" \r\n                        button=\"Add Application Owner\" \r\n                        label=\"Application Owner\" \r\n                        errors={errors.apps_owners}\r\n                    /> */}\r\n                    <ReactSwitch\r\n                        id=\"wflow_cond_switch\"\r\n                        name=\"wflow_cond_switch\"\r\n                        label=\"With workflow condition?\"\r\n                    />\r\n                    <ReactSwitch\r\n                        id=\"reqst_cond_switch\"\r\n                        name=\"reqst_cond_switch\"\r\n                        label=\"With request condition?\"\r\n                    />\r\n                    <MultipleInput \r\n                        show={values.reqst_cond_switch}\r\n                        value={values.condtn_cd} \r\n                        errors={errors.condtn_cd} \r\n                        touched={touched.condtn_cd} \r\n                        name=\"condtn_cd\" \r\n                        item=\"dropdowns\" \r\n                        placeholder=\"Condition Code\" \r\n                        button=\"Add Condition\" \r\n                        label=\"Condition Code\" \r\n                    />\r\n                    <ReactSwitch\r\n                        id=\"cond_ctrls_switch\"\r\n                        name=\"cond_ctrls_switch\"\r\n                        label=\"With conditional control?\"\r\n                    />\r\n                    <ReactSwitch\r\n                        id=\"form_validate_switch\"\r\n                        name=\"form_validate_switch\"\r\n                        label=\"With trigger on Save/Finalize?\"\r\n                    />\r\n                    <ReactSwitch\r\n                        id=\"ws_apvl_switch\"\r\n                        name=\"ws_apvl_switch\"\r\n                        label=\"With trigger on approval?\"\r\n                    />\r\n                    <ReactSwitch\r\n                        id=\"ws_actv_switch\"\r\n                        name=\"ws_actv_switch\"\r\n                        label=\"With trigger when an activity is done?\"\r\n                    />\r\n\r\n\r\n                    <RegularButton \r\n                        col=\"5\" \r\n                        type=\"submit\" \r\n                        size=\"lg\" \r\n                        text=\"Extract\" \r\n                        isSubmitting={isSubmitting} \r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n        </>\r\n    );}\r\n};\r\n\r\nexport default ReactCard;"]},"metadata":{},"sourceType":"module"}
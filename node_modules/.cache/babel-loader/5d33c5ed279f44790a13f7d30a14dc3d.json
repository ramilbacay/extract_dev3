{"ast":null,"code":"import _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\extract_dev3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\extract_dev3\\\\src\\\\components\\\\MainCard.js\";\nimport React, { useState } from 'react';\nimport { useFormik, Form, Formik, Field, FieldArray } from 'formik';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // import Form from 'react-bootstrap/Form';\n\nimport Card from 'react-bootstrap/Card';\nimport Container from 'react-bootstrap/Container';\nimport { BasicInput, SideButton, RegularButton, ReactSwitch } from './FormComponents.js';\nimport Row from 'react-bootstrap/Row';\n\nconst ReactCard = () => {\n  // const [cluster, setCluster] = useState(false);\n  // const formik = useFormik({\n  //     initialValues: {\n  //       reqst_cd: '',\n  //       wflow_cd: '',\n  //       workflows: ['1'],\n  //       cluster_switch: cluster\n  //     },\n  //     enableReinitialize: true,\n  //     onSubmit: values => {\n  //       alert(JSON.stringify(values, null, 2));\n  //     },\n  // });\n  // return(\n  //     <Container className=\"mt-5 mb-5\">\n  //         <Card>\n  //             <Card.Body>\n  //                 <Form onSubmit={formik.handleSubmit}>\n  //                     <Card.Title>Extract Script for Transport</Card.Title>\n  //                     <Row>\n  //                         <BasicInput id=\"reqst_cd\" name=\"reqst_cd\" value={formik.values.reqst_cd} onChange={formik.handleChange} col=\"6\" placeholder=\"Request Code\" type=\"text\" />\n  //                     </Row>\n  //                     <Row>\n  //                         <BasicInput id=\"wflow_cd\" name=\"wflow_cd\" value={formik.values.wflow_cd} onChange={formik.handleChange} col=\"6\" placeholder=\"Workflow Code\" type=\"text\" />\n  //                     </Row>\n  //                     <FieldArray\n  //                         name=\"workflows\"\n  //                         render={arrayHelpers => (\n  //                             formik.values.workflows.map((cd, index) => (\n  //                                 <Row key={`workflows_${index}`}>\n  //                                     <BasicInput\n  //                                         name={`workflows_${index}`}\n  //                                         id={`workflows_${index}`}\n  //                                         type=\"text\"\n  //                                         value={cd}\n  //                                         placeholder=\"Workflow Code\"\n  //                                     />\n  //                                 </Row>\n  //                             ))\n  //                         )}\n  //                     />\n  //                     <Row>\n  //                         <ReactSwitch id=\"cluster_switch\" name=\"cluster_switch\" label=\"With Cluster?\" checked={cluster} onChange={() => setCluster(!cluster)} />\n  //                     </Row>\n  //                     <Row>\n  //                         <RegularButton col=\"10\" type=\"submit\" />\n  //                     </Row>\n  //                 </Form>\n  //             </Card.Body>\n  //         </Card>\n  //     </Container>\n  // );\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        cluster = _useState2[0],\n        setCluster = _useState2[1];\n\n  return React.createElement(Formik, {\n    initialValues: {\n      workflows: []\n    },\n    onSubmit: values => setTimeout(() => {\n      alert(JSON.stringify(values, null, 2));\n    }, 500),\n    render: ({\n      values\n    }) => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(FieldArray, {\n      name: \"workflows\",\n      render: arrayHelpers => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, values.workflows && values.workflows.length > 0 ? values.workflows.map((workflow, index) => React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Field, {\n        name: `workflows.${index}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => arrayHelpers.remove(index) // remove a friend from the list\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"-\"), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => arrayHelpers.insert(index, '') // insert an empty string at a position\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"+\"))) : React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => arrayHelpers.push(''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Add a friend\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Submit\"))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  });\n};\n\nexport default ReactCard;","map":{"version":3,"sources":["C:/xampp/htdocs/extract_dev3/src/components/MainCard.js"],"names":["React","useState","useFormik","Form","Formik","Field","FieldArray","Card","Container","BasicInput","SideButton","RegularButton","ReactSwitch","Row","ReactCard","cluster","setCluster","workflows","values","setTimeout","alert","JSON","stringify","arrayHelpers","length","map","workflow","index","remove","insert","push"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useFormik, Form, Formik, Field, FieldArray } from 'formik';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport {BasicInput, SideButton, RegularButton, ReactSwitch} from './FormComponents.js';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nconst ReactCard = () => {\r\n\r\n    // const [cluster, setCluster] = useState(false);\r\n\r\n    // const formik = useFormik({\r\n    //     initialValues: {\r\n    //       reqst_cd: '',\r\n    //       wflow_cd: '',\r\n    //       workflows: ['1'],\r\n    //       cluster_switch: cluster\r\n    //     },\r\n    //     enableReinitialize: true,\r\n    //     onSubmit: values => {\r\n    //       alert(JSON.stringify(values, null, 2));\r\n    //     },\r\n    // });\r\n\r\n    \r\n    // return(\r\n    //     <Container className=\"mt-5 mb-5\">\r\n    //         <Card>\r\n    //             <Card.Body>\r\n    //                 <Form onSubmit={formik.handleSubmit}>\r\n    //                     <Card.Title>Extract Script for Transport</Card.Title>\r\n    //                     <Row>\r\n    //                         <BasicInput id=\"reqst_cd\" name=\"reqst_cd\" value={formik.values.reqst_cd} onChange={formik.handleChange} col=\"6\" placeholder=\"Request Code\" type=\"text\" />\r\n    //                     </Row>\r\n    //                     <Row>\r\n    //                         <BasicInput id=\"wflow_cd\" name=\"wflow_cd\" value={formik.values.wflow_cd} onChange={formik.handleChange} col=\"6\" placeholder=\"Workflow Code\" type=\"text\" />\r\n    //                     </Row>\r\n    //                     <FieldArray\r\n    //                         name=\"workflows\"\r\n    //                         render={arrayHelpers => (\r\n    //                             formik.values.workflows.map((cd, index) => (\r\n    //                                 <Row key={`workflows_${index}`}>\r\n    //                                     <BasicInput\r\n    //                                         name={`workflows_${index}`}\r\n    //                                         id={`workflows_${index}`}\r\n    //                                         type=\"text\"\r\n    //                                         value={cd}\r\n    //                                         placeholder=\"Workflow Code\"\r\n    //                                     />\r\n    //                                 </Row>\r\n    //                             ))\r\n    //                         )}\r\n    //                     />\r\n                        \r\n                            \r\n                        \r\n    //                     <Row>\r\n    //                         <ReactSwitch id=\"cluster_switch\" name=\"cluster_switch\" label=\"With Cluster?\" checked={cluster} onChange={() => setCluster(!cluster)} />\r\n    //                     </Row>\r\n    //                     <Row>\r\n    //                         <RegularButton col=\"10\" type=\"submit\" />\r\n    //                     </Row>\r\n    //                 </Form>\r\n    //             </Card.Body>\r\n    //         </Card>\r\n    //     </Container>\r\n    // );\r\n    const [cluster, setCluster] = useState(false);\r\n    return(\r\n        <Formik\r\n            initialValues={{ \r\n                workflows: [] \r\n            }}\r\n            onSubmit={values =>\r\n                setTimeout(() => {\r\n                alert(JSON.stringify(values, null, 2));\r\n                }, 500)\r\n            }\r\n            render={({ values }) => (\r\n                <Form>\r\n                <FieldArray\r\n                    name=\"workflows\"\r\n                    render={arrayHelpers => (\r\n                    <div>\r\n                        {values.workflows && values.workflows.length > 0 ? (\r\n                        values.workflows.map((workflow, index) => (\r\n                            <div key={index}>\r\n                            <Field name={`workflows.${index}`} />\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\r\n                            >\r\n                                -\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\r\n                            >\r\n                                +\r\n                            </button>\r\n                            </div>\r\n                        ))\r\n                        ) : (\r\n                        <button type=\"button\" onClick={() => arrayHelpers.push('')}>\r\n                            {/* show this when user has removed all friends from the list */}\r\n                            Add a friend\r\n                        </button>\r\n                        )}\r\n                        <div>\r\n                        <button type=\"submit\">Submit</button>\r\n                        </div>\r\n                    </div>\r\n                    )}\r\n                />\r\n                </Form>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ReactCard;"]},"metadata":{},"sourceType":"module"}
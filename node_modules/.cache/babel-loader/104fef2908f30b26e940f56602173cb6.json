{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\extract_dev3\\\\src\\\\components\\\\MainCard.js\";\nimport React from 'react';\nimport { Form, Formik } from 'formik';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as Bs from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { RegularButton, MultipleInput, InputWithLabel } from './FormComponents.js';\nconst ValidForm = Yup.object().shape({\n  reqst_cd: Yup.string().required('Request code is required.'),\n  workflows: Yup.array().of(Yup.string().required('Workflow code is required.')).min(1, 'Minimum of 1 workflow is required.'),\n  clusters: Yup.array().of(Yup.string().required('Cluster code is required.')),\n  cluster_apvls: Yup.array().of(Yup.string().required('Cluster Approval code is required.')),\n  dropdowns: Yup.array().of(Yup.string().required('Field Name is required.')),\n  apps_cd: Yup.string(),\n  apps_owners: Yup.array().of(Yup.string().required('Application Owner is required.')).min(2, 'Minimum of 1 workflow is required.')\n});\n\nclass ReactCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: []\n    }; // this.appsCdChangeHandler = this.appsCdChangeHandler.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"http://10.15.10.250:8080/extract_dev2/users\").then(res => res.json()).then(result => {\n      console.log(result);\n      this.setState({// users: result\n        // isLoaded: true,\n        // selectedOption: \"Please choose\"\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        error\n      });\n      console.log(this.state.error);\n    });\n  } // clusterApvlSwitchChangeHandler(){\n  //     var new_wflow = this.state.other_wflow.concat('');\n  //     this.setState({ other_wflow: new_wflow });\n  // }\n\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Formik, {\n      initialValues: {\n        users: this.state.users,\n        reqst_cd: '',\n        workflows: [],\n        cluster_switch: false,\n        clusters: [],\n        cluster_apvls: [],\n        dropdowns: [],\n        apps_cd: '',\n        apps_owners: []\n      },\n      enableReinitialize: true,\n      validationSchema: ValidForm,\n      onSubmit: values => console.log(values),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, ({\n      handleSubmit,\n      handleChange,\n      handleBlur,\n      values,\n      touched,\n      isValid,\n      errors,\n      form\n    }) => React.createElement(Bs.Container, {\n      className: \"mt-5 mb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Bs.Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Bs.Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Bs.Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Extract Script for Transport\"), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Bs.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(InputWithLabel, {\n      comp: Bs.Form.Control,\n      type: \"text\",\n      id: \"reqst_cd\",\n      name: \"reqst_cd\",\n      placeholder: \"Request Code\",\n      label: \"Request Code\",\n      errors: errors.reqst_cd,\n      touched: touched.reqst_cd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(MultipleInput, {\n      value: values.workflows,\n      errors: errors.workflows,\n      touched: touched.workflows,\n      name: \"workflows\",\n      item: \"workflow\",\n      placeholder: \"Workflow Code\",\n      button: \"Add Workflow\",\n      label: \"Workflow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(MultipleInput, {\n      value: values.clusters,\n      errors: errors.clusters,\n      touched: touched.clusters,\n      name: \"clusters\",\n      item: \"cluster\",\n      placeholder: \"Cluster Code\",\n      button: \"Add Cluster\",\n      label: \"Cluster\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(MultipleInput, {\n      value: values.cluster_apvls,\n      errors: errors.cluster_apvls,\n      touched: touched.cluster_apvls,\n      name: \"cluster_apvls\",\n      item: \"cluster_apvls\",\n      placeholder: \"Cluster Approval Code\",\n      button: \"Add Cluster Approver\",\n      label: \"Cluster Approval\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(MultipleInput, {\n      value: values.dropdowns,\n      errors: errors.dropdowns,\n      touched: touched.dropdowns,\n      name: \"dropdowns\",\n      item: \"dropdowns\",\n      placeholder: \"Field Name\",\n      button: \"Add Dropdown\",\n      label: \"Dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(Bs.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(InputWithLabel, {\n      comp: Bs.Form.Control,\n      type: \"text\",\n      id: \"apps_cd\",\n      name: \"apps_cd\",\n      placeholder: \"Application Code\",\n      label: \"Application Code\",\n      onChange: this.appsCdChangeHandler,\n      errors: errors.apps_cd,\n      touched: touched.apps_cd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(MultipleInput, {\n      value: values.apps_owners,\n      errors: errors.apps_owners,\n      touched: touched.apps_owners,\n      name: \"apps_owners\",\n      item: \"apps_owners\",\n      placeholder: \"Application Owner\",\n      button: \"Add Application Owner\",\n      label: \"Application Owner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(RegularButton, {\n      col: \"5\",\n      type: \"submit\",\n      size: \"lg\",\n      text: \"Extract\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\n;\nexport default ReactCard;","map":{"version":3,"sources":["C:/xampp/htdocs/extract_dev3/src/components/MainCard.js"],"names":["React","Form","Formik","Bs","Yup","RegularButton","MultipleInput","InputWithLabel","ValidForm","object","shape","reqst_cd","string","required","workflows","array","of","min","clusters","cluster_apvls","dropdowns","apps_cd","apps_owners","ReactCard","Component","constructor","props","state","users","componentDidMount","fetch","then","res","json","result","console","log","setState","error","render","cluster_switch","values","handleSubmit","handleChange","handleBlur","touched","isValid","errors","form","Control","appsCdChangeHandler"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form, Formik } from 'formik';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as Bs from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\n\r\nimport { RegularButton, MultipleInput, InputWithLabel} from './FormComponents.js';\r\n\r\nconst ValidForm = Yup.object().shape({\r\n        reqst_cd: Yup.string()\r\n            .required('Request code is required.'),\r\n        workflows: Yup.array()\r\n            .of(\r\n                Yup.string()\r\n                .required('Workflow code is required.'),\r\n            )\r\n            .min(1, 'Minimum of 1 workflow is required.'),\r\n        clusters: Yup.array()\r\n            .of(\r\n                Yup.string()\r\n                .required('Cluster code is required.')\r\n            ),\r\n        cluster_apvls: Yup.array()\r\n            .of(\r\n                Yup.string()\r\n                .required('Cluster Approval code is required.')\r\n            ),\r\n        dropdowns: Yup.array()\r\n            .of(\r\n                Yup.string()\r\n                .required('Field Name is required.')\r\n            ),\r\n        apps_cd: Yup.string(),\r\n        apps_owners: Yup.array()\r\n        .of(\r\n            Yup.string()\r\n            .required('Application Owner is required.'),\r\n        )\r\n        .min(2, 'Minimum of 1 workflow is required.'),\r\n});\r\n\r\nclass ReactCard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          users: []\r\n        };\r\n\r\n        // this.appsCdChangeHandler = this.appsCdChangeHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://10.15.10.250:8080/extract_dev2/users\")\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                console.log(result)\r\n                this.setState({\r\n                    // users: result\r\n                    // isLoaded: true,\r\n                    // selectedOption: \"Please choose\"\r\n                });\r\n            },\r\n            // Note: it's important to handle errors here\r\n            // instead of a catch() block so that we don't swallow\r\n            // exceptions from actual bugs in components.\r\n            (error) => {\r\n                this.setState({\r\n                    error\r\n                });\r\n                console.log(this.state.error)\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    // clusterApvlSwitchChangeHandler(){\r\n    //     var new_wflow = this.state.other_wflow.concat('');\r\n    //     this.setState({ other_wflow: new_wflow });\r\n    // }\r\n\r\n    render(){\r\n    return(\r\n        <>\r\n        <Formik\r\n            initialValues={{ \r\n                users: this.state.users,\r\n                reqst_cd: '',\r\n                workflows: [],\r\n                cluster_switch: false,\r\n                clusters: [],\r\n                cluster_apvls: [],\r\n                dropdowns: [],\r\n                apps_cd: '',\r\n                apps_owners: []\r\n            }}\r\n            enableReinitialize\r\n            validationSchema={ValidForm}\r\n            onSubmit={values =>\r\n                console.log(values)\r\n            }\r\n        >\r\n            {({ \r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                errors,\r\n                form\r\n            }) => (\r\n                <Bs.Container className=\"mt-5 mb-5\">\r\n                    <Bs.Card>\r\n                        <Bs.Card.Body>\r\n                            <Bs.Card.Title>Extract Script for Transport</Bs.Card.Title>\r\n                                <Form>\r\n                                    <Bs.Row>\r\n                                        <InputWithLabel\r\n                                            comp={Bs.Form.Control}\r\n                                            type=\"text\"\r\n                                            id=\"reqst_cd\"\r\n                                            name=\"reqst_cd\"\r\n                                            placeholder=\"Request Code\"\r\n                                            label=\"Request Code\"\r\n                                            errors={errors.reqst_cd}\r\n                                            touched={touched.reqst_cd}\r\n                                        />\r\n                                    </Bs.Row>\r\n                                    <MultipleInput value={values.workflows} errors={errors.workflows} touched={touched.workflows} name=\"workflows\" item=\"workflow\" placeholder=\"Workflow Code\" button=\"Add Workflow\" label=\"Workflow\" />\r\n                                    {/* <ReactSwitch label=\"With Cluster?\" name=\"cluster_switch\" id=\"cluster_switch\" col=\"5\" /> */}\r\n                                    <MultipleInput value={values.clusters} errors={errors.clusters} touched={touched.clusters} name=\"clusters\" item=\"cluster\" placeholder=\"Cluster Code\" button=\"Add Cluster\" label=\"Cluster\" />\r\n                                    <MultipleInput value={values.cluster_apvls} errors={errors.cluster_apvls} touched={touched.cluster_apvls} name=\"cluster_apvls\" item=\"cluster_apvls\" placeholder=\"Cluster Approval Code\" button=\"Add Cluster Approver\" label=\"Cluster Approval\" />\r\n                                    <MultipleInput value={values.dropdowns} errors={errors.dropdowns} touched={touched.dropdowns} name=\"dropdowns\" item=\"dropdowns\" placeholder=\"Field Name\" button=\"Add Dropdown\" label=\"Dropdown\" />\r\n                                    <Bs.Row>\r\n                                        <InputWithLabel\r\n                                            comp={Bs.Form.Control}\r\n                                            type=\"text\"\r\n                                            id=\"apps_cd\"\r\n                                            name=\"apps_cd\"\r\n                                            placeholder=\"Application Code\"\r\n                                            label=\"Application Code\"\r\n                                            onChange={this.appsCdChangeHandler}\r\n                                            errors={errors.apps_cd}\r\n                                            touched={touched.apps_cd}\r\n                                        />\r\n                                    </Bs.Row>\r\n                                    <MultipleInput value={values.apps_owners} errors={errors.apps_owners} touched={touched.apps_owners} name=\"apps_owners\" item=\"apps_owners\" placeholder=\"Application Owner\" button=\"Add Application Owner\" label=\"Application Owner\" />\r\n                                    <RegularButton col=\"5\" type=\"submit\" size=\"lg\" text=\"Extract\" />\r\n                                    \r\n                                </Form>\r\n                        </Bs.Card.Body>\r\n                    </Bs.Card>\r\n                </Bs.Container>\r\n            )}\r\n        </Formik>\r\n        </>\r\n    );}\r\n};\r\n\r\nexport default ReactCard;"]},"metadata":{},"sourceType":"module"}
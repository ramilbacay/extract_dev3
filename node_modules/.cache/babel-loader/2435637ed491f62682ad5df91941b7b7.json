{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\extract_dev3\\\\src\\\\components\\\\MainCard.js\";\nimport React from 'react';\nimport { Form, Formik } from 'formik';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as Bs from 'react-bootstrap';\nimport * as Yup from 'yup';\nimport { RegularButton, MultipleInput, InputWithLabel } from './FormComponents.js';\nconst ValidForm = Yup.object().shape({\n  reqst_cd: Yup.string().required('Request code is required.'),\n  workflows: Yup.array().of(Yup.string().required('Workflow code is required')).required('Minimum of 1 workflow is required.'),\n  clusters: Yup.array().of(Yup.string().required('Cluster code is required.')),\n  cluster_apvls: Yup.array().of(Yup.string().required('Cluster Approval code is required.')),\n  dropdowns: Yup.array().of(Yup.string().required('Field Name is required.')),\n  apps_owners: Yup.array().of(Yup.string().required('Application Owner is required.')),\n  apps_owners: yup.string().when('apps_cd', {\n    not: '',\n    then: schema => schema,\n    otherwise: yup.string().when('type', {\n      is: 'D',\n      then: yup.string().required('field required.')\n    })\n  })\n});\n\nconst ReactCard = () => {\n  return React.createElement(Formik, {\n    initialValues: {\n      reqst_cd: '',\n      workflows: [],\n      cluster_switch: false,\n      clusters: [],\n      cluster_apvls: [],\n      dropdowns: [],\n      apps_cd: '',\n      apps_owners: []\n    },\n    validationSchema: ValidForm,\n    onSubmit: values => console.log(values),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, ({\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    values,\n    touched,\n    isValid,\n    errors,\n    form\n  }) => React.createElement(Bs.Container, {\n    className: \"mt-5 mb-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Bs.Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Bs.Card.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Bs.Card.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Extract Script for Transport\"), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Bs.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(InputWithLabel, {\n    comp: Bs.Form.Control,\n    type: \"text\",\n    id: \"reqst_cd\",\n    name: \"reqst_cd\",\n    placeholder: \"Request Code\",\n    label: \"Request Code\",\n    errors: errors.reqst_cd,\n    touched: touched.reqst_cd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })), React.createElement(MultipleInput, {\n    value: values.workflows,\n    errors: errors.workflows,\n    touched: touched.workflows,\n    name: \"workflows\",\n    item: \"workflow\",\n    placeholder: \"Workflow Code\",\n    button: \"Add Workflow\",\n    label: \"Workflow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(MultipleInput, {\n    value: values.clusters,\n    errors: errors.clusters,\n    touched: touched.clusters,\n    name: \"clusters\",\n    item: \"cluster\",\n    placeholder: \"Cluster Code\",\n    button: \"Add Cluster\",\n    label: \"Cluster\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(MultipleInput, {\n    value: values.cluster_apvls,\n    errors: errors.cluster_apvls,\n    touched: touched.cluster_apvls,\n    name: \"cluster_apvls\",\n    item: \"cluster_apvls\",\n    placeholder: \"Cluster Approval Code\",\n    button: \"Add Cluster Approver\",\n    label: \"Cluster Approval\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(MultipleInput, {\n    value: values.dropdowns,\n    errors: errors.dropdowns,\n    touched: touched.dropdowns,\n    name: \"dropdowns\",\n    item: \"dropdowns\",\n    placeholder: \"Field Name\",\n    button: \"Add Dropdown\",\n    label: \"Dropdown\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(Bs.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(InputWithLabel, {\n    comp: Bs.Form.Control,\n    type: \"text\",\n    id: \"apps_cd\",\n    name: \"apps_cd\",\n    placeholder: \"Application Code\",\n    label: \"Application Code\",\n    errors: errors.apps_cd,\n    touched: touched.apps_cd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(MultipleInput, {\n    value: values.apps_owners,\n    errors: errors.apps_owners,\n    touched: touched.dropdowns,\n    name: \"dropdowns\",\n    item: \"dropdowns\",\n    placeholder: \"Field Name\",\n    button: \"Add Dropdown\",\n    label: \"Dropdown\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }), React.createElement(RegularButton, {\n    col: \"5\",\n    type: \"submit\",\n    size: \"lg\",\n    text: \"Extract\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }))))));\n};\n\nexport default ReactCard;","map":{"version":3,"sources":["C:/xampp/htdocs/extract_dev3/src/components/MainCard.js"],"names":["React","Form","Formik","Bs","Yup","RegularButton","MultipleInput","InputWithLabel","ValidForm","object","shape","reqst_cd","string","required","workflows","array","of","clusters","cluster_apvls","dropdowns","apps_owners","yup","when","not","then","schema","otherwise","is","ReactCard","cluster_switch","apps_cd","values","console","log","handleSubmit","handleChange","handleBlur","touched","isValid","errors","form","Control"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form, Formik } from 'formik';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as Bs from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\n\r\nimport { RegularButton, MultipleInput, InputWithLabel} from './FormComponents.js';\r\n\r\nconst ValidForm = Yup.object().shape({\r\n    reqst_cd: Yup.string()\r\n        .required('Request code is required.'),\r\n    workflows: Yup.array()\r\n        .of(\r\n            Yup.string()\r\n            .required('Workflow code is required'),\r\n        )\r\n        .required('Minimum of 1 workflow is required.'),\r\n    clusters: Yup.array()\r\n        .of(\r\n            Yup.string()\r\n            .required('Cluster code is required.')\r\n        ),\r\n    cluster_apvls: Yup.array()\r\n        .of(\r\n            Yup.string()\r\n            .required('Cluster Approval code is required.')\r\n        ),\r\n    dropdowns: Yup.array()\r\n        .of(\r\n            Yup.string()\r\n            .required('Field Name is required.')\r\n        ),\r\n    apps_owners: Yup.array()\r\n        .of(\r\n            Yup.string()\r\n            .required('Application Owner is required.')\r\n        ),\r\n    apps_owners: yup.string().when('apps_cd', {\r\n            not: '',\r\n            then: schema => schema,\r\n            otherwise: yup.string().when('type', {\r\n              is: 'D',\r\n              then: yup.string().required('field required.')\r\n            })\r\n          })\r\n});\r\n\r\nconst ReactCard = () => {\r\n\r\n\r\n    return(\r\n        <Formik\r\n            initialValues={{ \r\n                reqst_cd: '',\r\n                workflows: [],\r\n                cluster_switch: false,\r\n                clusters: [],\r\n                cluster_apvls: [],\r\n                dropdowns: [],\r\n                apps_cd: '',\r\n                apps_owners: [],\r\n            }}\r\n            validationSchema={ValidForm}\r\n            onSubmit={values =>\r\n                console.log(values)\r\n            }\r\n        >\r\n            {({ \r\n                handleSubmit,\r\n                handleChange,\r\n                handleBlur,\r\n                values,\r\n                touched,\r\n                isValid,\r\n                errors,\r\n                form\r\n            }) => (\r\n                <Bs.Container className=\"mt-5 mb-5\">\r\n                    <Bs.Card>\r\n                        <Bs.Card.Body>\r\n                            <Bs.Card.Title>Extract Script for Transport</Bs.Card.Title>\r\n                                <Form>\r\n                                    <Bs.Row>\r\n                                        <InputWithLabel\r\n                                            comp={Bs.Form.Control}\r\n                                            type=\"text\"\r\n                                            id=\"reqst_cd\"\r\n                                            name=\"reqst_cd\"\r\n                                            placeholder=\"Request Code\"\r\n                                            label=\"Request Code\"\r\n                                            errors={errors.reqst_cd}\r\n                                            touched={touched.reqst_cd}\r\n                                        />\r\n                                    </Bs.Row>\r\n                                    <MultipleInput value={values.workflows} errors={errors.workflows} touched={touched.workflows} name=\"workflows\" item=\"workflow\" placeholder=\"Workflow Code\" button=\"Add Workflow\" label=\"Workflow\" />\r\n                                    {/* <ReactSwitch label=\"With Cluster?\" name=\"cluster_switch\" id=\"cluster_switch\" col=\"5\" /> */}\r\n                                    <MultipleInput value={values.clusters} errors={errors.clusters} touched={touched.clusters} name=\"clusters\" item=\"cluster\" placeholder=\"Cluster Code\" button=\"Add Cluster\" label=\"Cluster\" />\r\n                                    <MultipleInput value={values.cluster_apvls} errors={errors.cluster_apvls} touched={touched.cluster_apvls} name=\"cluster_apvls\" item=\"cluster_apvls\" placeholder=\"Cluster Approval Code\" button=\"Add Cluster Approver\" label=\"Cluster Approval\" />\r\n                                    <MultipleInput value={values.dropdowns} errors={errors.dropdowns} touched={touched.dropdowns} name=\"dropdowns\" item=\"dropdowns\" placeholder=\"Field Name\" button=\"Add Dropdown\" label=\"Dropdown\" />\r\n                                    <Bs.Row>\r\n                                        <InputWithLabel\r\n                                            comp={Bs.Form.Control}\r\n                                            type=\"text\"\r\n                                            id=\"apps_cd\"\r\n                                            name=\"apps_cd\"\r\n                                            placeholder=\"Application Code\"\r\n                                            label=\"Application Code\"\r\n                                            errors={errors.apps_cd}\r\n                                            touched={touched.apps_cd}\r\n                                        />\r\n                                    </Bs.Row>\r\n                                    <MultipleInput value={values.apps_owners} errors={errors.apps_owners} touched={touched.dropdowns} name=\"dropdowns\" item=\"dropdowns\" placeholder=\"Field Name\" button=\"Add Dropdown\" label=\"Dropdown\" />\r\n                                    <RegularButton col=\"5\" type=\"submit\" size=\"lg\" text=\"Extract\" />\r\n                                    \r\n                                </Form>\r\n                        </Bs.Card.Body>\r\n                    </Bs.Card>\r\n                </Bs.Container>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default ReactCard;"]},"metadata":{},"sourceType":"module"}